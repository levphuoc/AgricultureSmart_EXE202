// <auto-generated />
using System;
using AgricultureSmart.Repositories.DbAgriContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgricultureSmart.Repositories.Migrations
{
    [DbContext(typeof(AgricultureSmartDbContext))]
    [Migration("20250614103226_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeaturedImage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("draft");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_Blogs_Slug");

                    b.ToTable("Blogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 2,
                            CategoryId = 1,
                            Content = "Bệnh đạo ôn lúa là một trong những bệnh phổ biến và nguy hiểm nhất đối với cây lúa. Bài viết này sẽ hướng dẫn cách nhận biết triệu chứng và các biện pháp phòng trị hiệu quả...",
                            CreatedAt = new DateTime(2025, 5, 30, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            FeaturedImage = "/images/blog/dao-on-lua.jpg",
                            PublishedAt = new DateTime(2025, 6, 4, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Slug = "cach-nhan-biet-va-phong-tri-benh-dao-on-lua",
                            Status = "published",
                            Title = "Cách nhận biết và phòng trị bệnh đạo ôn lúa",
                            UpdatedAt = new DateTime(2025, 6, 4, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ViewCount = 1250
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 3,
                            CategoryId = 3,
                            Content = "Việc bón phân đúng cách và đúng thời điểm là yếu tố quyết định năng suất lúa. Bài viết này sẽ hướng dẫn chi tiết cách bón phân NPK cho cây lúa...",
                            CreatedAt = new DateTime(2025, 6, 2, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            FeaturedImage = "/images/blog/bon-phan-lua.jpg",
                            PublishedAt = new DateTime(2025, 6, 7, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Slug = "huong-dan-bon-phan-npk-cho-cay-lua",
                            Status = "published",
                            Title = "Hướng dẫn bón phân NPK cho cây lúa theo từng giai đoạn",
                            UpdatedAt = new DateTime(2025, 6, 7, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ViewCount = 980
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 4,
                            CategoryId = 2,
                            Content = "Trồng rau màu trong nhà kính giúp kiểm soát được điều kiện môi trường, tăng năng suất và chất lượng sản phẩm. Bài viết này sẽ chia sẻ những kỹ thuật cần thiết...",
                            CreatedAt = new DateTime(2025, 6, 6, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            FeaturedImage = "/images/blog/rau-nha-kinh.jpg",
                            PublishedAt = new DateTime(2025, 6, 9, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Slug = "ky-thuat-trong-rau-mau-trong-nha-kinh",
                            Status = "published",
                            Title = "Kỹ thuật trồng rau màu trong nhà kính",
                            UpdatedAt = new DateTime(2025, 6, 9, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ViewCount = 756
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            CategoryId = 4,
                            Content = "Việc sử dụng thuốc BVTV cần tuân thủ nghiêm ngặt các quy định về an toàn để bảo vệ sức khỏe người sử dụng và môi trường...",
                            CreatedAt = new DateTime(2025, 6, 8, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            FeaturedImage = "/images/blog/an-toan-thuoc-bvtv.jpg",
                            PublishedAt = new DateTime(2025, 6, 11, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Slug = "an-toan-khi-su-dung-thuoc-bao-ve-thuc-vat",
                            Status = "published",
                            Title = "An toàn khi sử dụng thuốc bảo vệ thực vật",
                            UpdatedAt = new DateTime(2025, 6, 11, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ViewCount = 1100
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            CategoryId = 5,
                            Content = "Lịch thời vụ trồng lúa miền Nam được xây dựng dựa trên điều kiện khí hậu, thủy văn và kinh nghiệm sản xuất của nông dân...",
                            CreatedAt = new DateTime(2025, 6, 10, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            FeaturedImage = "/images/blog/lich-thoi-vu-lua.jpg",
                            PublishedAt = new DateTime(2025, 6, 13, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Slug = "lich-thoi-vu-trong-lua-mien-nam-2024",
                            Status = "published",
                            Title = "Lịch thời vụ trồng lúa miền Nam năm 2024",
                            UpdatedAt = new DateTime(2025, 6, 13, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ViewCount = 2100
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_BlogCategories_Name");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_BlogCategories_Slug");

                    b.ToTable("BlogCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Các bài viết về bệnh hại trên cây trồng và cách phòng trị",
                            IsActive = true,
                            Name = "Bệnh cây trồng",
                            Slug = "benh-cay-trong"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Hướng dẫn kỹ thuật trồng trọt và chăm sóc cây",
                            IsActive = true,
                            Name = "Kỹ thuật canh tác",
                            Slug = "ky-thuat-canh-tac"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Thông tin về các loại phân bón và cách sử dụng",
                            IsActive = true,
                            Name = "Phân bón",
                            Slug = "phan-bon"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Hướng dẫn sử dụng thuốc BVTV an toàn",
                            IsActive = true,
                            Name = "Thuốc bảo vệ thực vật",
                            Slug = "thuoc-bao-ve-thuc-vat"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Lịch thời vụ và mùa vụ canh tác",
                            IsActive = true,
                            Name = "Thời vụ",
                            Slug = "thoi-vu"
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 12, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            TotalAmount = 127000m,
                            UpdatedAt = new DateTime(2025, 6, 14, 4, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 13, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            TotalAmount = 540000m,
                            UpdatedAt = new DateTime(2025, 6, 14, 7, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 6
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 13, 22, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            TotalAmount = 85000m,
                            UpdatedAt = new DateTime(2025, 6, 14, 8, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 7
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CartId = 1,
                            CreatedAt = new DateTime(2025, 6, 12, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ProductId = 1,
                            Quantity = 2,
                            TotalPrice = 84000m,
                            UnitPrice = 42000m,
                            UpdatedAt = new DateTime(2025, 6, 12, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 2,
                            CartId = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 4, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ProductId = 2,
                            Quantity = 1,
                            TotalPrice = 25000m,
                            UnitPrice = 25000m,
                            UpdatedAt = new DateTime(2025, 6, 14, 4, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 3,
                            CartId = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 4, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ProductId = 4,
                            Quantity = 1,
                            TotalPrice = 18000m,
                            UnitPrice = 18000m,
                            UpdatedAt = new DateTime(2025, 6, 14, 4, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 4,
                            CartId = 2,
                            CreatedAt = new DateTime(2025, 6, 13, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ProductId = 8,
                            Quantity = 1,
                            TotalPrice = 420000m,
                            UnitPrice = 420000m,
                            UpdatedAt = new DateTime(2025, 6, 13, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 5,
                            CartId = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 7, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ProductId = 4,
                            Quantity = 5,
                            TotalPrice = 90000m,
                            UnitPrice = 18000m,
                            UpdatedAt = new DateTime(2025, 6, 14, 7, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 6,
                            CartId = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 7, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ProductId = 9,
                            Quantity = 2,
                            TotalPrice = 150000m,
                            UnitPrice = 75000m,
                            UpdatedAt = new DateTime(2025, 6, 14, 7, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 7,
                            CartId = 3,
                            CreatedAt = new DateTime(2025, 6, 13, 22, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ProductId = 6,
                            Quantity = 1,
                            TotalPrice = 85000m,
                            UnitPrice = 85000m,
                            UpdatedAt = new DateTime(2025, 6, 13, 22, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Engineer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Engineers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Chuyên gia về bệnh hại cây trồng với 8 năm kinh nghiệm trong lĩnh vực chẩn đoán và điều trị bệnh lúa, rau màu.",
                            Certification = "[\"Chứng chỉ Kỹ sư Nông nghiệp\", \"Chứng chỉ Chuyên gia Bệnh học thực vật\"]",
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ExperienceYears = 8,
                            Specialization = "Bệnh học thực vật",
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Chuyên gia về dinh dưỡng và phân bón cây trồng, có kinh nghiệm tư vấn cho nhiều hợp tác xã nông nghiệp.",
                            Certification = "[\"Chứng chỉ Kỹ sư Nông nghiệp\", \"Chứng chỉ Chuyên gia Dinh dưỡng thực vật\"]",
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ExperienceYears = 6,
                            Specialization = "Dinh dưỡng cây trồng",
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Chuyên gia kỹ thuật canh tác với 10 năm kinh nghiệm, chuyên về nông nghiệp hữu cơ và canh tác bền vững.",
                            Certification = "[\"Chứng chỉ Kỹ sư Nông nghiệp\", \"Chứng chỉ Chuyên gia Kỹ thuật canh tác\", \"Chứng chỉ Nông nghiệp hữu cơ\"]",
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ExperienceYears = 10,
                            Specialization = "Kỹ thuật canh tác",
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 4
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.EngineerFarmerAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EngineerId")
                        .HasColumnType("int");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FarmerId");

                    b.HasIndex("EngineerId", "FarmerId", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_EngineerFarmerAssignments_Unique_Active")
                        .HasFilter("[IsActive] = 1");

                    b.ToTable("EngineerFarmerAssignments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            EngineerId = 1,
                            FarmerId = 1,
                            IsActive = true,
                            Notes = "Hỗ trợ chẩn đoán bệnh lúa"
                        },
                        new
                        {
                            Id = 2,
                            AssignedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            EngineerId = 1,
                            FarmerId = 2,
                            IsActive = true,
                            Notes = "Tư vấn phòng trị bệnh hại"
                        },
                        new
                        {
                            Id = 3,
                            AssignedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            EngineerId = 2,
                            FarmerId = 3,
                            IsActive = true,
                            Notes = "Tư vấn dinh dưỡng cây trồng"
                        },
                        new
                        {
                            Id = 4,
                            AssignedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            EngineerId = 2,
                            FarmerId = 4,
                            IsActive = true,
                            Notes = "Hướng dẫn bón phân"
                        },
                        new
                        {
                            Id = 5,
                            AssignedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            EngineerId = 3,
                            FarmerId = 5,
                            IsActive = true,
                            Notes = "Tư vấn kỹ thuật canh tác hữu cơ"
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Farmer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CropTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("FarmSize")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("FarmingExperienceYears")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Farmers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            CropTypes = "[\"Lúa\", \"Rau màu\", \"Cây ăn trái\"]",
                            FarmLocation = "Ấp 1, Xã Tân Phú, Huyện Châu Thành, Tỉnh An Giang",
                            FarmSize = 2.5m,
                            FarmingExperienceYears = 15,
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            CropTypes = "[\"Lúa\", \"Ngô\", \"Đậu tương\"]",
                            FarmLocation = "Ấp 2, Xã Long Phú, Huyện Phú Tân, Tỉnh An Giang",
                            FarmSize = 3.2m,
                            FarmingExperienceYears = 12,
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 6
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            CropTypes = "[\"Rau màu\", \"Cây ăn trái\", \"Hoa màu\"]",
                            FarmLocation = "Ấp 3, Xã Vĩnh Hậu, Huyện Tân Hưng, Tỉnh Long An",
                            FarmSize = 1.8m,
                            FarmingExperienceYears = 8,
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 7
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            CropTypes = "[\"Lúa\", \"Mía\", \"Cây ăn trái\"]",
                            FarmLocation = "Ấp 4, Xã Đức Hòa, Huyện Đức Hòa, Tỉnh Long An",
                            FarmSize = 4.1m,
                            FarmingExperienceYears = 20,
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 8
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            CropTypes = "[\"Lúa\", \"Rau màu\", \"Đậu các loại\"]",
                            FarmLocation = "Ấp 5, Xã Tân Trụ, Huyện Tân Trụ, Tỉnh Long An",
                            FarmSize = 2.9m,
                            FarmingExperienceYears = 10,
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 9
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Excerpt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Featured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("Urgent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("News", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Bộ Nông nghiệp và Phát triển Nông thôn",
                            CategoryId = 1,
                            Content = "Chính phủ vừa phê duyệt chương trình hỗ trợ nông dân chuyển đổi số trong sản xuất nông nghiệp với tổng kinh phí 500 tỷ đồng...",
                            CreatedAt = new DateTime(2025, 6, 12, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Excerpt = "Chương trình hỗ trợ nông dân ứng dụng công nghệ số trong sản xuất nông nghiệp với tổng kinh phí 500 tỷ đồng.",
                            Featured = true,
                            ImageUrl = "/images/news/ho-tro-chuyen-doi-so.jpg",
                            PublishedAt = new DateTime(2025, 6, 12, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Source = "Bộ Nông nghiệp và Phát triển Nông thôn",
                            Tags = "[\"Chính sách\", \"Chuyển đổi số\", \"Hỗ trợ nông dân\"]",
                            Title = "Chính phủ hỗ trợ 500 tỷ đồng cho nông dân chuyển đổi số",
                            UpdatedAt = new DateTime(2025, 6, 12, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Urgent = false,
                            ViewCount = 3500
                        },
                        new
                        {
                            Id = 2,
                            Author = "Hiệp hội Lương thực Việt Nam",
                            CategoryId = 2,
                            Content = "Theo báo cáo từ Sở Nông nghiệp các tỉnh ĐBSCL, giá lúa đã tăng mạnh trong tuần qua...",
                            CreatedAt = new DateTime(2025, 6, 13, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Excerpt = "Giá lúa tại các tỉnh ĐBSCL tăng 200-300 đồng/kg so với tuần trước nhờ nhu cầu xuất khẩu tăng cao.",
                            Featured = false,
                            ImageUrl = "/images/news/gia-lua-tang.jpg",
                            PublishedAt = new DateTime(2025, 6, 13, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Source = "Hiệp hội Lương thực Việt Nam",
                            Tags = "[\"Giá lúa\", \"Xuất khẩu\", \"Thị trường\"]",
                            Title = "Giá lúa tăng mạnh do xuất khẩu khởi sắc",
                            UpdatedAt = new DateTime(2025, 6, 13, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Urgent = true,
                            ViewCount = 2800
                        },
                        new
                        {
                            Id = 3,
                            Author = "Viện Bảo vệ thực vật",
                            CategoryId = 3,
                            Content = "Các ứng dụng AI hiện đại đang giúp nông dân chẩn đoán bệnh cây trồng nhanh chóng và chính xác...",
                            CreatedAt = new DateTime(2025, 6, 13, 22, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Excerpt = "Công nghệ trí tuệ nhân tạo đang được ứng dụng rộng rãi trong việc chẩn đoán bệnh hại cây trồng với độ chính xác cao.",
                            Featured = true,
                            ImageUrl = "/images/news/ai-chan-doan-benh.jpg",
                            PublishedAt = new DateTime(2025, 6, 13, 22, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Source = "Viện Bảo vệ thực vật",
                            Tags = "[\"AI\", \"Công nghệ\", \"Chẩn đoán bệnh\"]",
                            Title = "Ứng dụng AI trong chẩn đoán bệnh cây trồng",
                            UpdatedAt = new DateTime(2025, 6, 13, 22, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Urgent = false,
                            ViewCount = 1900
                        },
                        new
                        {
                            Id = 4,
                            Author = "Ban Tổ chức",
                            CategoryId = 4,
                            Content = "Hội nghị sẽ quy tụ các chuyên gia hàng đầu thế giới về nông nghiệp bền vững...",
                            CreatedAt = new DateTime(2025, 6, 14, 4, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Excerpt = "Hội nghị quốc tế về nông nghiệp bền vững và an ninh lương thực sẽ được tổ chức tại Hà Nội từ ngày 15-17/2/2024.",
                            Featured = false,
                            ImageUrl = "/images/news/hoi-nghi-quoc-te.jpg",
                            PublishedAt = new DateTime(2025, 6, 14, 4, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Source = "Bộ Nông nghiệp và Phát triển Nông thôn",
                            Tags = "[\"Hội nghị\", \"Quốc tế\", \"Bền vững\", \"An ninh lương thực\"]",
                            Title = "Hội nghị quốc tế về nông nghiệp bền vững sẽ diễn ra tại Hà Nội",
                            UpdatedAt = new DateTime(2025, 6, 14, 4, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Urgent = false,
                            ViewCount = 1200
                        },
                        new
                        {
                            Id = 5,
                            Author = "Trung tâm Dự báo khí tượng thủy văn",
                            CategoryId = 5,
                            Content = "Theo dự báo, đợt không khí lạnh mạnh sẽ ảnh hưởng đến các tỉnh miền Bắc và Bắc Trung Bộ...",
                            CreatedAt = new DateTime(2025, 6, 14, 7, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Excerpt = "Trung tâm Dự báo khí tượng thủy văn cảnh báo đợt rét đậm có thể ảnh hưởng đến vụ lúa Đông Xuân.",
                            Featured = false,
                            ImageUrl = "/images/news/canh-bao-thoi-tiet.jpg",
                            PublishedAt = new DateTime(2025, 6, 14, 7, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Source = "Trung tâm Dự báo khí tượng thủy văn",
                            Tags = "[\"Thời tiết\", \"Cảnh báo\", \"Lúa Đông Xuân\"]",
                            Title = "Cảnh báo thời tiết bất lợi cho vụ lúa Đông Xuân",
                            UpdatedAt = new DateTime(2025, 6, 14, 7, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Urgent = true,
                            ViewCount = 4200
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.NewsCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_NewsCategories_Name");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_NewsCategories_Slug");

                    b.ToTable("NewsCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Tin tức về chính sách nông nghiệp",
                            IsActive = true,
                            Name = "Chính sách",
                            Slug = "chinh-sach"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Thông tin thị trường nông sản",
                            IsActive = true,
                            Name = "Thị trường",
                            Slug = "thi-truong"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Công nghệ mới trong nông nghiệp",
                            IsActive = true,
                            Name = "Công nghệ",
                            Slug = "cong-nghe"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Các sự kiện nông nghiệp",
                            IsActive = true,
                            Name = "Sự kiện",
                            Slug = "su-kien"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Dự báo thời tiết phục vụ sản xuất",
                            IsActive = true,
                            Name = "Thời tiết",
                            Slug = "thoi-tiet"
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("pending");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("pending");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Orders_OrderNumber");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 25, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            OrderNumber = "ORD-2024-001",
                            PaidAt = new DateTime(2025, 5, 30, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            PaymentMethod = "cod",
                            PaymentStatus = "paid",
                            ShippingAddress = "Ấp 1, Xã Tân Phú, Huyện Châu Thành, Tỉnh An Giang",
                            Status = "delivered",
                            TotalAmount = 189000m,
                            UpdatedAt = new DateTime(2025, 5, 30, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 4, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            OrderNumber = "ORD-2024-002",
                            PaidAt = new DateTime(2025, 6, 6, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            PaymentMethod = "bank_transfer",
                            PaymentStatus = "paid",
                            ShippingAddress = "Ấp 2, Xã Long Phú, Huyện Phú Tân, Tỉnh An Giang",
                            Status = "shipped",
                            TotalAmount = 3450000m,
                            UpdatedAt = new DateTime(2025, 6, 12, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 6
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 11, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            OrderNumber = "ORD-2024-003",
                            PaymentMethod = "cod",
                            PaymentStatus = "pending",
                            ShippingAddress = "Ấp 3, Xã Vĩnh Hậu, Huyện Tân Hưng, Tỉnh Long An",
                            Status = "processing",
                            TotalAmount = 160000m,
                            UpdatedAt = new DateTime(2025, 6, 13, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 7
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 13, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            OrderNumber = "ORD-2024-004",
                            PaymentMethod = "cod",
                            PaymentStatus = "pending",
                            ShippingAddress = "Ấp 4, Xã Đức Hòa, Huyện Đức Hòa, Tỉnh Long An",
                            Status = "pending",
                            TotalAmount = 95000m,
                            UpdatedAt = new DateTime(2025, 6, 13, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 8
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 3,
                            TotalPrice = 126000m,
                            UnitPrice = 42000m
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            ProductId = 2,
                            Quantity = 1,
                            TotalPrice = 25000m,
                            UnitPrice = 25000m
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 1,
                            ProductId = 4,
                            Quantity = 2,
                            TotalPrice = 36000m,
                            UnitPrice = 18000m
                        },
                        new
                        {
                            Id = 4,
                            OrderId = 1,
                            ProductId = 9,
                            Quantity = 1,
                            TotalPrice = 75000m,
                            UnitPrice = 75000m
                        },
                        new
                        {
                            Id = 5,
                            OrderId = 2,
                            ProductId = 10,
                            Quantity = 1,
                            TotalPrice = 3300000m,
                            UnitPrice = 3300000m
                        },
                        new
                        {
                            Id = 6,
                            OrderId = 2,
                            ProductId = 4,
                            Quantity = 5,
                            TotalPrice = 90000m,
                            UnitPrice = 18000m
                        },
                        new
                        {
                            Id = 7,
                            OrderId = 2,
                            ProductId = 5,
                            Quantity = 3,
                            TotalPrice = 60000m,
                            UnitPrice = 20000m
                        },
                        new
                        {
                            Id = 8,
                            OrderId = 3,
                            ProductId = 3,
                            Quantity = 5,
                            TotalPrice = 160000m,
                            UnitPrice = 32000m
                        },
                        new
                        {
                            Id = 9,
                            OrderId = 4,
                            ProductId = 7,
                            Quantity = 1,
                            TotalPrice = 95000m,
                            UnitPrice = 95000m
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasDatabaseName("IX_Products_SKU");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Giống lúa ST25 chất lượng cao, năng suất ổn định, kháng bệnh tốt. Thời gian sinh trưởng 95-100 ngày.",
                            DiscountPrice = 42000m,
                            ImageUrl = "/images/products/hat-giong-lua-st25.jpg",
                            IsActive = true,
                            Name = "Hạt giống lúa ST25",
                            Price = 45000m,
                            Rating = 0.0,
                            SKU = "HG-ST25-001",
                            Stock = 500,
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Hạt giống rau cải xanh F1, tỷ lệ nảy mầm cao, sinh trưởng nhanh, chống chịu tốt.",
                            ImageUrl = "/images/products/hat-giong-cai-xanh.jpg",
                            IsActive = true,
                            Name = "Hạt giống rau cải xanh",
                            Price = 25000m,
                            Rating = 0.0,
                            SKU = "HG-CX-002",
                            Stock = 200,
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Giống cà chua F1 năng suất cao, quả to, màu đỏ đẹp, thích hợp trồng quanh năm.",
                            DiscountPrice = 32000m,
                            ImageUrl = "/images/products/hat-giong-ca-chua.jpg",
                            IsActive = true,
                            Name = "Hạt giống cà chua F1",
                            Price = 35000m,
                            Rating = 0.0,
                            SKU = "HG-CC-003",
                            Stock = 150,
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Phân NPK 16-16-8 chuyên dụng cho cây lúa, cung cấp đầy đủ dinh dưỡng cho cây trồng.",
                            ImageUrl = "/images/products/phan-npk-16-16-8.jpg",
                            IsActive = true,
                            Name = "Phân NPK 16-16-8",
                            Price = 18000m,
                            Rating = 0.0,
                            SKU = "PB-NPK-004",
                            Stock = 1000,
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Phân hữu cơ vi sinh giúp cải tạo đất, tăng cường sức đề kháng cho cây trồng.",
                            DiscountPrice = 20000m,
                            ImageUrl = "/images/products/phan-huu-co-vi-sinh.jpg",
                            IsActive = true,
                            Name = "Phân hữu cơ vi sinh",
                            Price = 22000m,
                            Rating = 0.0,
                            SKU = "PB-HCVS-005",
                            Stock = 800,
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Thuốc trừ sâu Regent 50SC hiệu quả cao, an toàn cho người và môi trường.",
                            ImageUrl = "/images/products/thuoc-tru-sau-regent.jpg",
                            IsActive = true,
                            Name = "Thuốc trừ sâu Regent 50SC",
                            Price = 85000m,
                            Rating = 0.0,
                            SKU = "BVTV-REG-006",
                            Stock = 300,
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Thuốc diệt cỏ Gramoxone tác dụng nhanh, hiệu quả cao với nhiều loại cỏ dại.",
                            ImageUrl = "/images/products/thuoc-diet-co-gramoxone.jpg",
                            IsActive = true,
                            Name = "Thuốc diệt cỏ Gramoxone",
                            Price = 95000m,
                            Rating = 0.0,
                            SKU = "BVTV-GRA-007",
                            Stock = 250,
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Máy phun thuốc bình xịt dung tích 16L, áp suất cao, phun đều, tiết kiệm thuốc.",
                            DiscountPrice = 420000m,
                            ImageUrl = "/images/products/may-phun-thuoc-16l.jpg",
                            IsActive = true,
                            Name = "Máy phun thuốc bình xịt 16L",
                            Price = 450000m,
                            Rating = 0.0,
                            SKU = "DC-MPT-008",
                            Stock = 50,
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Cuốc xới đất cán gỗ chất lượng cao, bền bỉ, phù hợp cho mọi loại đất.",
                            ImageUrl = "/images/products/cuoc-xoi-dat.jpg",
                            IsActive = true,
                            Name = "Cuốc xới đất cán gỗ",
                            Price = 75000m,
                            Rating = 0.0,
                            SKU = "DC-CXD-009",
                            Stock = 100,
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Máy cắt cỏ Honda GX35 công suất mạnh, tiết kiệm nhiên liệu, độ bền cao.",
                            DiscountPrice = 3300000m,
                            ImageUrl = "/images/products/may-cat-co-honda.jpg",
                            IsActive = true,
                            Name = "Máy cắt cỏ Honda GX35",
                            Price = 3500000m,
                            Rating = 0.0,
                            SKU = "MM-MCC-010",
                            Stock = 20,
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_ProductCategories_Name");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_ProductCategories_Slug");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Các loại hạt giống cây trồng",
                            IsActive = true,
                            Name = "Hạt giống",
                            Slug = "hat-giong"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Các loại phân bón hữu cơ và vô cơ",
                            IsActive = true,
                            Name = "Phân bón",
                            Slug = "phan-bon"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Thuốc bảo vệ thực vật",
                            IsActive = true,
                            Name = "Thuốc BVTV",
                            Slug = "thuoc-bvtv"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Các dụng cụ và thiết bị nông nghiệp",
                            IsActive = true,
                            Name = "Dụng cụ nông nghiệp",
                            Slug = "dung-cu-nong-nghiep"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Máy móc thiết bị nông nghiệp",
                            IsActive = true,
                            Name = "Máy móc",
                            Slug = "may-moc"
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 25, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ProductId = 1,
                            ReviewMessage = "Hạt giống chất lượng tuyệt vời! Tỷ lệ nảy mầm cao, cây lúa sinh trưởng khỏe mạnh. Năng suất đạt như quảng cáo. Sẽ tiếp tục mua ở lần sau.",
                            ReviewValue = 5,
                            UpdatedAt = new DateTime(2025, 5, 25, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 5,
                            UserName = "Nguyễn Thị D"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 27, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ProductId = 1,
                            ReviewMessage = "Giống lúa tốt, năng suất ổn định. Chỉ có điều giá hơi cao so với các giống khác. Nhưng chất lượng xứng đáng với giá tiền.",
                            ReviewValue = 4,
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 6,
                            UserName = "Trần Văn E"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 30, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ProductId = 4,
                            ReviewMessage = "Phân bón hiệu quả tốt, cây trồng xanh tốt sau khi bón. Giá cả hợp lý, giao hàng nhanh chóng.",
                            ReviewValue = 5,
                            UpdatedAt = new DateTime(2025, 5, 30, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 7,
                            UserName = "Lê Thị F"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 2, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ProductId = 8,
                            ReviewMessage = "Máy phun hoạt động tốt, áp suất ổn định. Dung tích 16L vừa phải cho diện tích nhỏ. Chỉ có điều hơi nặng khi mang lâu.",
                            ReviewValue = 4,
                            UpdatedAt = new DateTime(2025, 6, 2, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 8,
                            UserName = "Phạm Văn G"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 4, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ProductId = 5,
                            ReviewMessage = "Phân hữu cơ rất tốt! Đất trở nên tơi xốp hơn, cây trồng khỏe mạnh. Đặc biệt hiệu quả với rau màu. Giá có khuyến mãi nữa, rất hài lòng!",
                            ReviewValue = 5,
                            UpdatedAt = new DateTime(2025, 6, 4, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 9,
                            UserName = "Hoàng Thị H"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 6, 6, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ProductId = 6,
                            ReviewMessage = "Thuốc trừ sâu hiệu quả, sâu chết nhanh sau khi phun. Tuy nhiên cần chú ý an toàn khi sử dụng.",
                            ReviewValue = 4,
                            UpdatedAt = new DateTime(2025, 6, 6, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 5,
                            UserName = "Nguyễn Thị D"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 6, 9, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            ProductId = 10,
                            ReviewMessage = "Máy cắt cỏ Honda chất lượng xuất sắc! Máy chạy êm, cắt sạch, tiết kiệm xăng. Đáng đồng tiền bát gạo. Khuyên mọi người nên mua.",
                            ReviewValue = 5,
                            UpdatedAt = new DateTime(2025, 6, 9, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserId = 6,
                            UserName = "Trần Văn E"
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "System Administrator",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Agricultural Engineer",
                            Name = "Engineer"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Description = "Farmer User",
                            Name = "Farmer"
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedEngineerId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CropType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("medium");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("open");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignedEngineerId");

                    b.HasIndex("FarmerId");

                    b.ToTable("Tickets", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedEngineerId = 1,
                            Category = "Bệnh cây trồng",
                            ContactMethod = "Điện thoại",
                            CreatedAt = new DateTime(2025, 6, 9, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            CropType = "Lúa",
                            Description = "Lúa của tôi đang trong giai đoạn đẻ nhánh nhưng bị vàng lá từ dưới lên, một số cây đã chết khô. Tôi đã tưới nước đầy đủ nhưng tình trạng không cải thiện.",
                            FarmerId = 1,
                            ImageUrl = "default.jpg",
                            Location = "Ruộng A1, Ấp 1, Xã Tân Phú",
                            PhoneNumber = "0905678901",
                            Priority = "high",
                            Status = "in_progress",
                            Title = "Lúa bị vàng lá và chết khô",
                            UpdatedAt = new DateTime(2025, 6, 12, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 2,
                            AssignedEngineerId = 2,
                            Category = "Dinh dưỡng cây trồng",
                            ContactMethod = "Email",
                            CreatedAt = new DateTime(2025, 6, 11, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            CropType = "Lúa",
                            Description = "Tôi chuẩn bị gieo sạ vụ lúa mới, muốn được tư vấn về lượng phân bón cần thiết cho 3.2 hecta đất.",
                            FarmerId = 2,
                            ImageUrl = "default.jpg",
                            Location = "Ruộng B2, Ấp 2, Xã Long Phú",
                            PhoneNumber = "0906789012",
                            Priority = "medium",
                            Status = "assigned",
                            Title = "Tư vấn lượng phân bón cho vụ lúa mới",
                            UpdatedAt = new DateTime(2025, 6, 11, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 3,
                            Category = "Sâu bệnh",
                            ContactMethod = "Điện thoại",
                            CreatedAt = new DateTime(2025, 6, 13, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            CropType = "Rau màu",
                            Description = "Rau cải của tôi bị sâu ăn lá nghiêm trọng, lá bị thủng lỗ chỗ. Cần tư vấn thuốc trừ sâu phù hợp.",
                            FarmerId = 3,
                            ImageUrl = "default.jpg",
                            Location = "Vườn C1, Ấp 3, Xã Vĩnh Hậu",
                            PhoneNumber = "0907890123",
                            Priority = "urgent",
                            Status = "open",
                            Title = "Rau cải bị sâu ăn lá",
                            UpdatedAt = new DateTime(2025, 6, 13, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 4,
                            AssignedEngineerId = 3,
                            Category = "Kỹ thuật canh tác",
                            ContactMethod = "Email",
                            CreatedAt = new DateTime(2025, 6, 4, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            CropType = "Cây ăn trái",
                            Description = "Tôi muốn chuyển đổi sang mô hình trồng trọt hữu cơ cho vườn cây ăn trái. Cần được hướng dẫn quy trình và kỹ thuật.",
                            FarmerId = 4,
                            ImageUrl = "default.jpg",
                            Location = "Vườn D1, Ấp 4, Xã Đức Hòa",
                            PhoneNumber = "0908901234",
                            Priority = "low",
                            ResolvedAt = new DateTime(2025, 6, 13, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Status = "resolved",
                            Title = "Hướng dẫn kỹ thuật trồng hữu cơ",
                            UpdatedAt = new DateTime(2025, 6, 13, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = 5,
                            Category = "Đất đai",
                            ContactMethod = "Điện thoại",
                            CreatedAt = new DateTime(2025, 6, 13, 22, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            CropType = "Rau màu",
                            Description = "Đất trồng rau của tôi có vẻ bị chua, cây trồng sinh trưởng chậm, lá vàng. Cần tư vấn cách cải tạo đất.",
                            FarmerId = 5,
                            ImageUrl = "default.jpg",
                            Location = "Ruộng E1, Ấp 5, Xã Tân Trụ",
                            PhoneNumber = "0909012345",
                            Priority = "medium",
                            Status = "open",
                            Title = "Đất bị chua, cây trồng sinh trưởng kém",
                            UpdatedAt = new DateTime(2025, 6, 13, 22, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770)
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.TicketComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketComments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Dựa vào mô tả và hình ảnh, có thể cây lúa của anh bị bệnh khô vằn. Tôi sẽ đến khảo sát thực địa vào chiều mai.",
                            CreatedAt = new DateTime(2025, 6, 10, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            IsInternal = false,
                            TicketId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Cảm ơn kỹ sư. Tôi sẽ chờ anh đến khảo sát. Hiện tại tình trạng vẫn đang lan rộng.",
                            CreatedAt = new DateTime(2025, 6, 10, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            IsInternal = false,
                            TicketId = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Đã khảo sát thực địa. Xác định là bệnh khô vằn do nấm. Đã hướng dẫn anh sử dụng thuốc Validamycin 3% với liều lượng 1.5L/ha.",
                            CreatedAt = new DateTime(2025, 6, 12, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            IsInternal = false,
                            TicketId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Với diện tích 3.2ha lúa, anh nên sử dụng: Phân lót 200kg NPK 16-16-8, phân thúc lần 1: 100kg Urea, phân thúc lần 2: 80kg NPK 20-20-15.",
                            CreatedAt = new DateTime(2025, 6, 12, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            IsInternal = false,
                            TicketId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Đã hoàn thành hướng dẫn chuyển đổi hữu cơ cho anh. Gửi kèm tài liệu quy trình chi tiết qua email.",
                            CreatedAt = new DateTime(2025, 6, 13, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            IsInternal = false,
                            TicketId = 4,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            RoleId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            RoleId = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            RoleId = 3,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            RoleId = 3,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            RoleId = 3,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            RoleId = 3,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            RoleId = 3,
                            UserId = 9
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_PhoneNumber");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_UserName");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Đường Cách Mạng Tháng 8, Quận 1, TP.HCM",
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Email = "admin@agricultural.com",
                            IsActive = true,
                            Password = "admin123",
                            PhoneNumber = "0901234567",
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Đường Lê Lợi, Quận 3, TP.HCM",
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Email = "nguyenvana@agricultural.com",
                            IsActive = true,
                            Password = "engineer123",
                            PhoneNumber = "0902345678",
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserName = "engineer1"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Đường Nguyễn Huệ, Quận 1, TP.HCM",
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Email = "tranthib@agricultural.com",
                            IsActive = true,
                            Password = "engineer123",
                            PhoneNumber = "0903456789",
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserName = "engineer2"
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 Đường Pasteur, Quận 3, TP.HCM",
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Email = "levanc@agricultural.com",
                            IsActive = true,
                            Password = "engineer123",
                            PhoneNumber = "0904567890",
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserName = "engineer3"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Ấp 1, Xã Tân Phú, Huyện Châu Thành, Tỉnh An Giang",
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Email = "nguyenthid@gmail.com",
                            IsActive = true,
                            Password = "farmer123",
                            PhoneNumber = "0905678901",
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserName = "farmer1"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Ấp 2, Xã Long Phú, Huyện Phú Tân, Tỉnh An Giang",
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Email = "tranvane@gmail.com",
                            IsActive = true,
                            Password = "farmer123",
                            PhoneNumber = "0906789012",
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserName = "farmer2"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Ấp 3, Xã Vĩnh Hậu, Huyện Tân Hưng, Tỉnh Long An",
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Email = "lethif@gmail.com",
                            IsActive = true,
                            Password = "farmer123",
                            PhoneNumber = "0907890123",
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserName = "farmer3"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Ấp 4, Xã Đức Hòa, Huyện Đức Hòa, Tỉnh Long An",
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Email = "phamvang@gmail.com",
                            IsActive = true,
                            Password = "farmer123",
                            PhoneNumber = "0908901234",
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserName = "farmer4"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Ấp 5, Xã Tân Trụ, Huyện Tân Trụ, Tỉnh Long An",
                            CreatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            Email = "hoangthih@gmail.com",
                            IsActive = true,
                            Password = "farmer123",
                            PhoneNumber = "0909012345",
                            UpdatedAt = new DateTime(2025, 6, 14, 10, 32, 25, 236, DateTimeKind.Utc).AddTicks(5770),
                            UserName = "farmer5"
                        });
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Blog", b =>
                {
                    b.HasOne("AgricultureSmart.Repositories.Entities.Users", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AgricultureSmart.Repositories.Entities.BlogCategory", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Cart", b =>
                {
                    b.HasOne("AgricultureSmart.Repositories.Entities.Users", "User")
                        .WithOne("Cart")
                        .HasForeignKey("AgricultureSmart.Repositories.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.CartItem", b =>
                {
                    b.HasOne("AgricultureSmart.Repositories.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgricultureSmart.Repositories.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Engineer", b =>
                {
                    b.HasOne("AgricultureSmart.Repositories.Entities.Users", "User")
                        .WithOne("Engineer")
                        .HasForeignKey("AgricultureSmart.Repositories.Entities.Engineer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.EngineerFarmerAssignment", b =>
                {
                    b.HasOne("AgricultureSmart.Repositories.Entities.Engineer", "Engineer")
                        .WithMany("EngineerFarmerAssignments")
                        .HasForeignKey("EngineerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AgricultureSmart.Repositories.Entities.Farmer", "Farmer")
                        .WithMany("EngineerFarmerAssignments")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Engineer");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Farmer", b =>
                {
                    b.HasOne("AgricultureSmart.Repositories.Entities.Users", "User")
                        .WithOne("Farmer")
                        .HasForeignKey("AgricultureSmart.Repositories.Entities.Farmer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.News", b =>
                {
                    b.HasOne("AgricultureSmart.Repositories.Entities.NewsCategory", "Category")
                        .WithMany("News")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Order", b =>
                {
                    b.HasOne("AgricultureSmart.Repositories.Entities.Users", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.OrderItem", b =>
                {
                    b.HasOne("AgricultureSmart.Repositories.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgricultureSmart.Repositories.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Product", b =>
                {
                    b.HasOne("AgricultureSmart.Repositories.Entities.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Review", b =>
                {
                    b.HasOne("AgricultureSmart.Repositories.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgricultureSmart.Repositories.Entities.Users", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Ticket", b =>
                {
                    b.HasOne("AgricultureSmart.Repositories.Entities.Engineer", "AssignedEngineer")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssignedEngineerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AgricultureSmart.Repositories.Entities.Farmer", "Farmer")
                        .WithMany("Tickets")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedEngineer");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.TicketComment", b =>
                {
                    b.HasOne("AgricultureSmart.Repositories.Entities.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgricultureSmart.Repositories.Entities.Users", "User")
                        .WithMany("TicketComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.UserRole", b =>
                {
                    b.HasOne("AgricultureSmart.Repositories.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgricultureSmart.Repositories.Entities.Users", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.BlogCategory", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Engineer", b =>
                {
                    b.Navigation("AssignedTickets");

                    b.Navigation("EngineerFarmerAssignments");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Farmer", b =>
                {
                    b.Navigation("EngineerFarmerAssignments");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.NewsCategory", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Ticket", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("AgricultureSmart.Repositories.Entities.Users", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Engineer")
                        .IsRequired();

                    b.Navigation("Farmer")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("TicketComments");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
